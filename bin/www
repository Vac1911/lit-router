#!/usr/bin/env node

/**
 * Module dependencies.
 */
 const app = require("../app");
 const debug = require("debug")("myapp:server");
 const http = require("http");
 const status = require("../server/status");

 const chalk = require('chalk');

 /**
  * Create HTTP server.
  */
 const server = http.createServer(app);

 init();

 async function init() {
     /**
      * Get port from environment and store in Express.
      */
     const port = normalizePort(process.env.PORT || "3000"),
         portUsedBy = status.checkPort(port);
    //  if (portUsedBy && portUsedBy !== process.pid) {
    //      console.log(process.pid);
    //      // Output port status
    //      console.log(chalk.red(`PORT ${port} - OCCUPIED`));
    //      const prompt = require("prompt");
    //      prompt.start();
    //      prompt.message = false;
    //      prompt.delimiter = '';
    //      prompt.colors = false;
    //      // TODO: display more data with `ps -o pid,tname,start_time,stat,user,cmd ${portUsedBy}` and `pwdx ${portUsedBy}`
    //      const {question: canKill} = await prompt.get({description: `Can PID ${portUsedBy.trim()} be killed (y/n) ?`});

    //      if (canKill.toLowerCase() != 'y' && canKill.toLowerCase() != 'yes') return console.log("Server Not Started");

    //      let output = await status.execCmd(`kill -9 ${portUsedBy}`);
    //      console.log('Server Started');
    //  }

     app.set("port", port);

     /**
      * Listen on provided port, on all network interfaces.
      */
     server.listen(port);
     server.on("error", onError);
     server.on("listening", onListening);
 }

 /**
  * Normalize a port into a number, string, or false.
  */
 function normalizePort(val) {
     var port = parseInt(val, 10);

     if (isNaN(port)) {
         // named pipe
         return val;
     }

     if (port >= 0) {
         // port number
         return port;
     }

     return false;
 }

 /**
  * Event listener for HTTP server "error" event.
  */
 function onError(error) {
     if (error.syscall !== "listen") {
         throw error;
     }

     var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

     // handle specific listen errors with friendly messages
     switch (error.code) {
         case "EACCES":
             console.error(bind + " requires elevated privileges");
             process.exit(1);
             break;
         case "EADDRINUSE":
             console.error(bind + " is already in use");
             process.exit(1);
             break;
         default:
             throw error;
     }
 }

 /**
  * Event listener for HTTP server "listening" event.
  */
 function onListening() {
     var addr = server.address();
     var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
     debug("Listening on " + bind);
 }
